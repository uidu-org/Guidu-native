{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/rehype-component.ts", "../../../__registry__/index.tsx"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nimport { rehypeComponent } from './src/lib/rehype-component'\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n  },\n}\n\nexport const Docs = defineDocumentType(() => ({\n  name: 'Docs',\n  filePathPattern: `components/**/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      // required: true,\n    },\n    description: {\n      type: 'string',\n    },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: './src/docs/content',\n  documentTypes: [Docs],\n  mdx: {\n    rehypePlugins: [rehypeComponent],\n  },\n})\n", "import { UnistNode, UnistTree } from '@/types/unist'\nimport fs from 'fs'\nimport path from 'path'\nimport { u } from 'unist-builder'\nimport { visit } from 'unist-util-visit'\nimport { Index } from '../../__registry__'\n\nexport function rehypeComponent() {\n  return async (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      // src prop overrides both name and fileName.\n      const { value: srcPath } =\n        (getNodeAttributeByName(node, 'src') as {\n          name: string\n          value?: string\n          type?: string\n        }) || {}\n\n      if (node.name === 'ComponentSource') {\n        const name = getNodeAttributeByName(node, 'name')?.value as string\n        const fileName = getNodeAttributeByName(node, 'fileName')?.value as string | undefined\n\n        if (!name && !srcPath) {\n          return null\n        }\n\n        try {\n          // Adjust the loop for components\n          for (const component of Object.values(Index)) {\n            let src: string\n\n            if (srcPath) {\n              src = srcPath\n            } else {\n              src = fileName\n                ? component.files.find((file: string) => {\n                    return file.endsWith(`${fileName}.tsx`) || file.endsWith(`${fileName}.ts`)\n                  }) || component.files[0]\n                : component.files[0]\n            }\n\n            // Read the source file.\n            const filePath = path.join(process.cwd(), src)\n            let source = fs.readFileSync(filePath, 'utf8')\n\n            // Replace imports.\n            // TODO: Use @swc/core and a visitor to replace this.\n            // For now a simple regex should do.\n            source = source.replaceAll(\n              `@/docs/components/example${component.name}/`,\n              '@/components/'\n            )\n            source = source.replaceAll('export default', 'export')\n\n            // Add code as children so that rehype can take over at build time.\n            node.children?.push(\n              u('element', {\n                tagName: 'pre',\n                properties: {\n                  __src__: src,\n                  __style__: component.name,\n                },\n                attributes: [\n                  {\n                    name: 'styleName',\n                    type: 'mdxJsxAttribute',\n                    value: component.name,\n                  },\n                ],\n                children: [\n                  u('element', {\n                    tagName: 'code',\n                    properties: {\n                      className: ['language-tsx'],\n                    },\n                    children: [\n                      {\n                        type: 'text',\n                        value: source,\n                      },\n                    ],\n                  }),\n                ],\n              })\n            )\n          }\n        } catch (error) {\n          console.error(error)\n        }\n      }\n\n      if (node.name === 'ComponentPreview') {\n        const name = getNodeAttributeByName(node, 'name')?.value as string\n\n        if (!name) {\n          return null\n        }\n\n        try {\n          // Adjust the loop for components\n          for (const component of Object.values(Index)) {\n            const src = component.files[0]\n\n            // Read the source file.\n            const filePath = path.join(process.cwd(), src)\n            let source = fs.readFileSync(filePath, 'utf8')\n\n            // Replace imports.\n            // TODO: Use @swc/core and a visitor to replace this.\n            // For now a simple regex should do.\n            source = source.replaceAll(\n              `@/docs/components/example${component.name}/`,\n              '@/components/'\n            )\n            source = source.replaceAll('export default', 'export')\n\n            // Add code as children so that rehype can take over at build time.\n            node.children?.push(\n              u('element', {\n                tagName: 'pre',\n                properties: {\n                  __src__: src,\n                },\n                children: [\n                  u('element', {\n                    tagName: 'code',\n                    properties: {\n                      className: ['language-tsx'],\n                    },\n                    children: [\n                      {\n                        type: 'text',\n                        value: source,\n                      },\n                    ],\n                  }),\n                ],\n              })\n            )\n          }\n        } catch (error) {\n          console.error(error)\n        }\n      }\n    })\n  }\n}\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes?.find((attribute) => attribute.name === name)\n}\n\nfunction getComponentSourceFileContent(node: UnistNode) {\n  const src = getNodeAttributeByName(node, 'src')?.value as string\n\n  if (!src) {\n    return null\n  }\n\n  // Read the source file.\n  const filePath = path.join(process.cwd(), src)\n  const source = fs.readFileSync(filePath, 'utf8')\n\n  return source\n}\n", "// @ts-nocheck\n// This file is autogenerated by scripts/build-registry.ts\n// Do not edit this file directly.\nimport * as React from \"react\"\n\nexport const Index: Record<string, any> = {\n  \"accordion-demo\": {\n    name: \"accordion-demo\",\n    type: \"components:example\",\n    egistryDependencies: [\"accordion\"],\n    component: React.lazy(() => import(\"@/docs/components/example/accordion-demo\")),\n    files: [\"src/docs/components/example/accordion-demo.tsx\"],\n  }, \"alert-demo\": {\n    name: \"alert-demo\",\n    type: \"components:example\",\n    egistryDependencies: [\"alert\"],\n    component: React.lazy(() => import(\"@/docs/components/example/alert-demo\")),\n    files: [\"src/docs/components/example/alert-demo.tsx\"],\n  }, \"alert-destructive\": {\n    name: \"alert-destructive\",\n    type: \"components:example\",\n    egistryDependencies: [\"alert\"],\n    component: React.lazy(() => import(\"@/docs/components/example/alert-destructive\")),\n    files: [\"src/docs/components/example/alert-destructive.tsx\"],\n  }, \"alert-dialog-demo\": {\n    name: \"alert-dialog-demo\",\n    type: \"components:example\",\n    egistryDependencies: [\"alert-dialog\", \"button\"],\n    component: React.lazy(() => import(\"@/docs/components/example/alert-dialog-demo\")),\n    files: [\"src/docs/components/example/alert-dialog-demo.tsx\"],\n  }, \"avatar-demo\": {\n    name: \"avatar-demo\",\n    type: \"components:example\",\n    egistryDependencies: [\"avatar\"],\n    component: React.lazy(() => import(\"@/docs/components/example/avatar-demo\")),\n    files: [\"src/docs/components/example/avatar-demo.tsx\"],\n  }, \"badge-demo\": {\n    name: \"badge-demo\",\n    type: \"components:example\",\n    egistryDependencies: [\"badge\"],\n    component: React.lazy(() => import(\"@/docs/components/example/badge-demo\")),\n    files: [\"src/docs/components/example/badge-demo.tsx\"],\n  }, \"badge-destructive\": {\n    name: \"badge-destructive\",\n    type: \"components:example\",\n    egistryDependencies: [\"badge\"],\n    component: React.lazy(() => import(\"@/docs/components/example/badge-destructive\")),\n    files: [\"src/docs/components/example/badge-destructive.tsx\"],\n  }, \"badge-outline\": {\n    name: \"badge-outline\",\n    type: \"components:example\",\n    egistryDependencies: [\"badge\"],\n    component: React.lazy(() => import(\"@/docs/components/example/badge-outline\")),\n    files: [\"src/docs/components/example/badge-outline.tsx\"],\n  }, \"badge-secondary\": {\n    name: \"badge-secondary\",\n    type: \"components:example\",\n    egistryDependencies: [\"badge\"],\n    component: React.lazy(() => import(\"@/docs/components/example/badge-secondary\")),\n    files: [\"src/docs/components/example/badge-secondary.tsx\"],\n  }, \"button-demo\": {\n    name: \"button-demo\",\n    type: \"components:example\",\n    egistryDependencies: [\"button\"],\n    component: React.lazy(() => import(\"@/docs/components/example/button-demo\")),\n    files: [\"src/docs/components/example/button-demo.tsx\"],\n  },\n}\n"],
  "mappings": "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",
  "names": []
}
